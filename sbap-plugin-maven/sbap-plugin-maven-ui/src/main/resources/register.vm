package ${register.packageName};

import java.util.Map;
import java.util.HashMap;
import ru.sbsoft.sbap.schema.ui.ApplicationContext;
import ru.sbsoft.sbap.schema.ui.AbstractElementFactory;
import ru.sbsoft.sbap.schema.ui.AbstractRegister;

public class $register.className implements AbstractRegister<${register.type}> {
    
    private Map<String, ${register.type}> itemMap = new HashMap<>();
    
    @Override
    public $register.type get(String name, ApplicationContext context) {
        if (name == null) {
            return null;
        }
        if(itemMap.containsKey(name)){
            return itemMap.get(name);
        }
        $register.type item = create(name, context);
        itemMap.put(name, item);
        return item;
    }

    @Override
    public $register.type create(String name, ApplicationContext context){
        final AbstractElementFactory<? extends ${register.type}> factory = getFactory(name, context);
        if (factory == null) {
            return null;
        }
        return factory.createElement(context);
    }

    public AbstractElementFactory<? extends ${register.type}> getFactory(String name, ApplicationContext context) {
        switch (name) {
#foreach($factory in ${register.factories.entrySet()})
            case ${factory.value}.NAME:
                return get_${factory.key}() ;
#end
            default:
                return null;
        }
    }

#foreach($factory in ${register.factories.entrySet()})
    private ${factory.value} ${factory.key};
    public ${factory.value} get_${factory.key}() {
        if(${factory.key} == null){
            ${factory.key} = create_${factory.key}();
        }
        return ${factory.key};
    }
    public ${factory.value} create_${factory.key}(){
        return new ${factory.value}();
    }

#end
}
